# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#

'.source.go':
  'return nil and error':
    'prefix': 'rne'
    'body': 'return nil, err'
  'return false and error':
    'prefix': 'rfe'
    'body': 'return false, err'
  'Return True and Nil':
    'prefix': 'rte'
    'body': 'return true, nil'
  'Create test':
    'prefix': 'test'
    'body': """
      func Test${1}(t *testing.T) {
        ${2}
      }
    """
  'sort struct':
    'prefix': 'sortby'
    'body': """
      // By$1 implements sort.Interface for []$2 based on
      // the $1 field.
      type By$1 []$2

      func (a By$1) Len() int           { return len(a) }
      func (a By$1) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
      func (a By$1) Less(i, j int) bool { return a[i].$1 < a[j].$1 }
    """
  'method declaration':
    'prefix': 'meth'
    'body': "func (${1:receiver} ${2:T}) $3($4) $5 {\n\t$0\n}"
  'lock defer unlock':
    'prefix': 'lockunlock'
    'body': "${1:mutex}.Lock()\ndefer ${1:mutex}.Unlock()"
  'init function':
    'prefix': 'init'
    'body': "func init() {\n\t$0\n}"

'.source.ruby':
  'sort struct':
    'prefix': 'frozstr'
    'body': "# frozen_string_literal: true\n"
