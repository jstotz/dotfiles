" --- Core ---
set nocompatible
syntax on
filetype plugin indent on

call pathogen#infect()
call pathogen#helptags()

colorscheme Tomorrow-Night

set number " line numbers
set ruler " show cursor position
set encoding=utf-8
set cursorline " highlight current line

set laststatus=2

set hlsearch
set incsearch
set ignorecase
set smartcase

" Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

set showcmd " shows partial commands in status bar
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

set history=1000

set colorcolumn=100

" Whitespace
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set list listchars=tab:\ \ ,trail:Â·

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,.DS_Store,yard/*

" File types
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby
au BufNewFile,BufRead *.json set ft=javascript

" Automatically source .vimrc on change
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

" % to bounce from do to end etc.
runtime! macros/matchit.vim

" Allow usage of hidden buffers
set hidden

" --- Custom commands and keyboard mappings ---

" Assign leader
let mapleader = ","

" Enter command mode with SPACE instead of :
noremap <Space> :

" Exit insert mode with jj (double J) instead of ESC
imap jj <Esc>

" Clear search highlight on enter
nnoremap <CR> :noh<CR><CR>

" Save with sudo
cmap w!! %!sudo tee > /dev/null %

" Shortcut for cd-ing into a Projects subdirectory
map <Leader>c <ESC>:cd ~/Projects/

" Open vimrc in new tab
nmap <leader>v :tabedit $MYVIMRC<CR>
" --- Plugins ---

" Syntastic
let g:syntastic_enable_signs=1
let g:syntastic_quiet_warnings=1

" NERDTree
let NERDTreeIgnore=['\.pyc$', '\.rbc$', '\~$']
map <Leader>n :NERDTreeToggle<CR>
let NERDTreeShowBookmarks=1

"Gundo
nnoremap <Leader>g :GundoToggle<CR>

" CtrlP
nnoremap <c-b> :CtrlPBuffer<CR>

" Taglist
let Tlist_GainFocus_On_ToggleOpen = 1
nnoremap <Leader>t :TlistToggle<CR>
