" --- Vundle ---
set nocompatible
filetype off " required
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle (required)
Plugin 'gmarik/Vundle.vim'

" Plugins
Plugin 'kien/ctrlp.vim'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'dhruvasagar/vim-vinegar'
Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/syntastic'
Plugin 'sjl/gundo.vim'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'tComment'
Plugin 'bling/vim-airline'
Plugin 'nelstrom/vim-visual-star-search'
Plugin 'vim-scripts/AutoTag'
Plugin 'majutsushi/tagbar'
Plugin 'camelcasemotion'
Plugin 'mattn/emmet-vim'
Plugin 'rking/ag.vim'
Plugin 'maxbrunsfeld/vim-yankstack'
Plugin 'christoomey/ctrlp-generic'
Plugin 'Blackrush/vim-gocode'
Plugin 'kana/vim-textobj-user'
Plugin 'mattn/webapi-vim'
Plugin 'mattn/gist-vim'
Plugin 'unimpaired.vim'
Plugin 'bronson/vim-trailing-whitespace'

" On Probation
" ------------
" Plugin 'Buffergator'
" Plugin 'ArgsAndMore'
" Plugin 'michaeljsmith/vim-indent-object'
" Plugin 'kana/vim-textobj-user'
" Plugin 'Rename2'
" Plugin 'SQLUtilities'
" Plugin 'skwp/vim-ruby-conque'
" Plugin 'Conque-Shell'
" Plugin 'airblade/vim-gitgutter'
" Plugin 'MatchTag'

" File Types
Plugin 'kchmck/vim-coffee-script'
Plugin 'lukaszkorecki/CoffeeTags'
Plugin 'AndrewRadev/vim-eco'
Plugin 'pangloss/vim-javascript'
Plugin 'elzr/vim-json'
Plugin 't9md/vim-ruby-xmpfilter'
Plugin 'nelstrom/vim-textobj-rubyblock'
Plugin 'mxw/vim-jsx'
Plugin 'mtscout6/vim-cjsx'
" haml/sass/scss
Plugin 'tpope/vim-haml'
Plugin 'tpope/vim-markdown'
Plugin 'kelan/gyp.vim'
Plugin 'wting/rust.vim'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'nginx.vim'

" Color Schemes
Plugin 'nanotech/jellybeans.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'chriskempson/base16-vim'

call vundle#end()
filetype plugin indent on " required
" --- /Vundle ---

" --- Core ---
syntax on
set background=dark
colorscheme solarized

" Enable per-project .vimrc files
set exrc
" Only execute safe per-project vimrc commands
set secure

if version >= 703
  " Persistent undo
  set undofile
  set undodir=~/.vim/tmp/undo

  " Column markers
  set colorcolumn=80,120
  hi ColorColumn guibg=#1F1F1F
endif

set number " show line numbers
set ruler " show cursor position
set scrolloff=14 " always keep cursor 14 lines from edge

set encoding=utf-8
set cursorline " highlight current line

set history=1000
set visualbell
set lazyredraw

" Search
set hlsearch
set incsearch
set ignorecase
set smartcase

" Disable swap files
set noswapfile
set nobackup
set nowb

" Status line
set showcmd " shows partial commands in status bar
set laststatus=2

" Whitespace
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,vendor/bundle/*,.DS_Store,yard/*,_site,*/tmp/*
set ofu=syntaxcomplete#Complete

" File types
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,Capfile,Guardfile,config.ru} set ft=ruby
au BufRead,BufNewFile *.scss	set filetype=scss.css
au BufRead,BufNewFile *.eco	set filetype=eco.html
au BufRead,BufNewFile *.erb	set filetype=eruby.erb.html

" golang
filetype off
filetype plugin indent off
set runtimepath+=$GOROOT/misc/vim
filetype plugin indent on
autocmd BufWritePre *.go Fmt
let g:gofmt_command = "goimports"

" Automatically source .vimrc on change
augroup myvimrc
    autocmd!
    autocmd BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | AirlineRefresh
augroup END

" % to bounce from do to end etc.
runtime! macros/matchit.vim

" Allow usage of hidden buffers
set hidden

" make backspace behave in a sane manner.
set backspace=indent,eol,start

" --- Custom commands and keyboard mappings ---

" Need to setup yankstack before remapping Y
call yankstack#setup()

" Make Y behave like the other capital letter actions
nnoremap Y y$

" Move between windows
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Assign leader
let mapleader = ","

" Enter command mode with space
noremap <Space> :

" Clear search highlight on enter
nnoremap <silent> <CR> :noh<CR><CR>

" Save with sudo
cmap w!! %!sudo tee > /dev/null %

" Open .vimrc file for editing
nmap <Leader>v :edit $MYVIMRC<CR>

" Strip trailing whitespace
nmap <Leader>s :FixWhitespace<CR>

" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e

" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" Abbreviations
cnoreabbrev W w
cnoreabbrev Wq wq

" System clipboard
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>y "+y

" --- Plugins ---

" [Syntastic]
let g:syntastic_auto_loc_list=1
let g:syntastic_ruby_checkers = ['mri', 'rubocop']

" [Gundo]
nnoremap <Leader>g :GundoToggle<CR>

" [CtrlP]
let g:ctrlp_cmd = 'CtrlPMixed'
noremap <Leader>b :CtrlPBuffer<CR>
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_extensions = ['dir', 'mixed', 'tag']
map <Leader>c <ESC>:CtrlPDir ~/Projects<CR>
map <Leader>d <ESC>:CtrlPDir<CR>
map <Leader>b <ESC>:CtrlPBuffer<CR>

" [Tagbar]
nnoremap <Leader>t :TagbarToggle<CR>

" [The Silver Searcher (Ag)]
nnoremap <Leader>a :Ag --smart-case 

" [airline]
let g:airline_powerline_fonts = 1

" [YouCompleteMe]
" prevent mapping <Leader>d
let g:ycm_key_detailed_diagnostics = ''

" [Emmet]
let g:use_emmet_complete_tag = 1

" [gitgutter]
highlight clear SignColumn

" [ArgsAndMore]
command! QuickfixToArgs CListToArgs

" [UltiSnips]
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" [vim-coffee-script]
let g:coffee_lint_options = '-f ~/.coffeelint.json'
let coffee_compiler = 'cjsx'

" [yankstack]
" Equivalent to <M-P> and <M-p> in iTerm2
nmap ∏ <Plug>yankstack_substitute_older_paste
nmap π <Plug>yankstack_substitute_newer_paste
nmap <Leader>y :Yanks<cr>

function! YanksList()
  let list = []
  for yank in g:yankstack()
    call add(list, yank.text)
  endfor
  return list
endfunction

function! MyGreatCallback(selected_value)
    echo "You selected: " . a:selected_value
    call setreg('@', a:selected_value)
    exec normal p
endfunction

" [xmpfilter]
let g:xmpfilter_cmd = "seeing_is_believing"

autocmd FileType ruby nmap <buffer> <D-m> <Plug>(seeing_is_believing-mark)
autocmd FileType ruby xmap <buffer> <D-m> <Plug>(seeing_is_believing-mark)
autocmd FileType ruby imap <buffer> <D-m> <Plug>(seeing_is_believing-mark)

autocmd FileType ruby nmap <buffer> <D-c> <Plug>(seeing_is_believing-clean)
autocmd FileType ruby xmap <buffer> <D-c> <Plug>(seeing_is_believing-clean)
autocmd FileType ruby imap <buffer> <D-c> <Plug>(seeing_is_believing-clean)

" xmpfilter compatible
autocmd FileType ruby nmap <buffer> <D-r> <Plug>(seeing_is_believing-run_-x)
autocmd FileType ruby xmap <buffer> <D-r> <Plug>(seeing_is_believing-run_-x)
autocmd FileType ruby imap <buffer> <D-r> <Plug>(seeing_is_believing-run_-x)

" auto insert mark at appropriate spot.
autocmd FileType ruby nmap <buffer> <F5> <Plug>(seeing_is_believing-run)
autocmd FileType ruby xmap <buffer> <F5> <Plug>(seeing_is_believing-run)
autocmd FileType ruby imap <buffer> <F5> <Plug>(seeing_is_believing-run)

au FocusGained,BufEnter * :silent! !

" [postgresql]
command! PgFormat %!pg_format -

" [xml]
au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null

" [gist]
let g:gist_detect_filetype = 1
let g:gist_post_private = 1
let g:gist_open_browser_after_post = 1
let g:gist_clip_command = 'pbcopy'
