" --- Vundle ---
set nocompatible
filetype off " required
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
" let Vundle manage Vundle (required)
Bundle 'gmarik/vundle'

" My Bundles
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-fugitive'
Bundle 'ervandew/supertab'
Bundle 'kchmck/vim-coffee-script'
Bundle 'michaeljsmith/vim-indent-object'
Bundle 'mileszs/ack.vim'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'pangloss/vim-javascript'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/syntastic'
Bundle 'sjl/gundo.vim'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
Bundle 'vim-scripts/AutoTag'
Bundle 'majutsushi/tagbar'
Bundle 'kana/vim-textobj-user'
Bundle 'YankRing.vim'
Bundle 'kien/ctrlp.vim'
Bundle 'nelstrom/vim-textobj-rubyblock'
Bundle 'minibufexpl.vim'
Bundle 'commentary.vim'
Bundle 'ChrisKempson/Vim-Tomorrow-Theme'
Bundle 'camelcasemotion'
Bundle 'vim-json-bundle'
Bundle 'EasyMotion'

filetype plugin indent on " required
" --- /Vundle ---

" --- Core ---
syntax on

colorscheme Tomorrow-Night

set number " line numbers
set ruler " show cursor position

set encoding=utf-8
set cursorline " highlight current line

set hlsearch
set incsearch
set ignorecase
set smartcase

" Disable swap files
set noswapfile
set nobackup
set nowb

set showcmd " shows partial commands in status bar
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
set laststatus=2

set history=1000

set colorcolumn=100

" Whitespace
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set list listchars=tab:\ \ ,trail:Â·

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,vendor/bundle/*,.DS_Store,yard/*

" File types
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby

" Automatically source .vimrc on change
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

" % to bounce from do to end etc.
runtime! macros/matchit.vim

" Allow usage of hidden buffers
set hidden

" Make backspace behave in a sane manner.
set backspace=indent,eol,start

" --- Custom commands and keyboard mappings ---

" Move between windows
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Assign leader
let mapleader = ","

" Enter command mode with SPACE instead of :
noremap <Space> :

" Clear search highlight on enter
nnoremap <CR> :noh<CR><CR>
nnoremap <Esc> :noh<CR>

" Save with sudo
cmap w!! %!sudo tee > /dev/null %

" Shortcut for cd-ing into a Projects subdirectory
map <Leader>c <ESC>:cd ~/Projects/

" Open vimrc in new tab
nmap <leader>v :tabedit $MYVIMRC<CR>

" Strip trailing whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
command! StripTrailingWhitespaces call <SID>StripTrailingWhitespaces()
nmap <Leader>s :StripTrailingWhitespaces<CR>

" --- Plugins ---

" YankRing
let g:yankring_replace_n_pkey = '<m-p>'
let g:yankring_replace_n_nkey = '<m-n>'

" Syntastic
let g:syntastic_enable_signs=1
let g:syntastic_quiet_warnings=1

"Gundo
nnoremap <Leader>g :GundoToggle<CR>

" CtrlP
noremap <c-b> :CtrlPBuffer<CR>
inoremap <c-b> <Esc>:CtrlPBuffer<CR>
let g:ctrlp_root_markers = ['.root.dir']

" Tagbar
nnoremap <Leader>t :TagbarToggle<CR>
let g:tagbar_type_coffee = {
  \ 'kinds' : [
  \   'f:functions',
  \   'o:object'
  \ ],
  \ 'kind2scope' : {
  \  'f' : 'object',
  \   'o' : 'object'
  \},
  \ 'sro' : ".",
  \ 'ctagsbin' : 'coffeetags',
  \ 'ctagsargs' : ' ',
  \}

" Ack
nnoremap <Leader>a :Ack --smart-case 

" NERDTree
let NERDTreeIgnore=['\.pyc$', '\.rbc$', '\~$']
map <Leader>n :NERDTreeToggle<CR>
let NERDTreeShowBookmarks=1
map <leader>r :NERDTreeFind<cr>

" Indent Guides
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1

