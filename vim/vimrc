" --- Vundle ---
set nocompatible
filetype off " required
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
" let Vundle manage Vundle (required)
Bundle 'gmarik/vundle'

" Plugins
Bundle 'Shougo/unite.vim'
Bundle 'Shougo/neomru.vim'
Bundle 'Shougo/vimproc.vim'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-fugitive'
Bundle 'Valloric/YouCompleteMe'
Bundle 'scrooloose/syntastic'
Bundle 'sjl/gundo.vim'
Bundle 'SirVer/ultisnips'
Bundle 'tComment'
Bundle 'bling/vim-airline'
Bundle 'scrooloose/nerdtree'
Bundle 'nelstrom/vim-visual-star-search'
Bundle 'vim-scripts/AutoTag'
Bundle 'majutsushi/tagbar'
Bundle 'camelcasemotion'
Bundle "mattn/emmet-vim"

" On Probation
" ------------
" Bundle 'Buffergator'
" Bundle 'ArgsAndMore'
" Bundle 'michaeljsmith/vim-indent-object'
" Bundle 'kana/vim-textobj-user'
" Bundle 'nelstrom/vim-textobj-rubyblock'
" Bundle 'Rename2'
" Bundle 'SQLUtilities'
" Bundle 'unimpaired.vim'
" Bundle 'skwp/vim-ruby-conque'
" Bundle 'Conque-Shell'
" Bundle 'airblade/vim-gitgutter'
" Bundle 'MatchTag'
" Bundle 'kien/ctrlp.vim'
" Bundle 'yankstack'
" Bundle 'rking/ag.vim'

" File Types
Bundle 'kchmck/vim-coffee-script'
Bundle 'AndrewRadev/vim-eco'
Bundle 'pangloss/vim-javascript'
Bundle 'elzr/vim-json'
" haml/sass/scss
Bundle 'tpope/vim-haml'
Bundle 'tpope/vim-markdown'

" Color Schemes
Bundle 'nanotech/jellybeans.vim'
Bundle 'altercation/vim-colors-solarized'
Bundle 'chriskempson/base16-vim'

filetype plugin indent on " required
" --- /Vundle ---

" --- Core ---
syntax on
set background=dark
colorscheme solarized

" Enable per-project .vimrc files
set exrc
" Only execute safe per-project vimrc commands
set secure

if version >= 703
  " Persistent undo
  set undofile
  set undodir=~/.vim/tmp/undo

  " Column markers
  set colorcolumn=80,120
  hi ColorColumn guibg=#1F1F1F
endif

set number " show line numbers
set ruler " show cursor position
set scrolloff=14 " always keep cursor 14 lines from edge

set encoding=utf-8
set cursorline " highlight current line

set history=1000
set visualbell
set clipboard=unnamed
set lazyredraw

" Search
set hlsearch
set incsearch
set ignorecase
set smartcase

" Disable swap files
set noswapfile
set nobackup
set nowb

" Status line
set showcmd " shows partial commands in status bar
set laststatus=2

" Whitespace
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set list listchars=tab:\ \ ,trail:Â·

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,vendor/bundle/*,.DS_Store,yard/*,_site
set ofu=syntaxcomplete#Complete

" File types
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,Capfile,Guardfile,config.ru} set ft=ruby
au BufRead,BufNewFile *.scss	set filetype=scss.css
au BufRead,BufNewFile *.eco	set filetype=eco.html
au BufRead,BufNewFile *.erb	set filetype=eruby.erb.html

" golang
filetype off
filetype plugin indent off
set runtimepath+=$GOROOT/misc/vim
filetype plugin indent on

" Automatically source .vimrc on change
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

" % to bounce from do to end etc.
runtime! macros/matchit.vim

" Allow usage of hidden buffers
set hidden

" make backspace behave in a sane manner.
set backspace=indent,eol,start

" --- Custom commands and keyboard mappings ---

" Make Y behave like the other capital letter actions
nnoremap Y y$

" Move between windows
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Assign leader
let mapleader = ","

" Enter command mode with space
noremap <Space> :

" Clear search highlight on enter
nnoremap <silent> <CR> :noh<CR><CR>

" Save with sudo
cmap w!! %!sudo tee > /dev/null %

" Open vimrc in new tab
nmap <Leader>v :edit $MYVIMRC<CR>

" Strip trailing whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
command! StripTrailingWhitespaces call <SID>StripTrailingWhitespaces()
nmap <Leader>s :StripTrailingWhitespaces<CR>

" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e

" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" Abbreviations
cnoreabbrev W w
cnoreabbrev Wq wq

" --- Plugins ---

" [Syntastic]
let g:syntastic_auto_loc_list=1

" [Gundo]
nnoremap <Leader>g :GundoToggle<CR>

" [Unite]
let g:unite_source_history_yank_enable = 1
let g:unite_source_grep_command = 'ag'
let g:unite_source_grep_default_opts = '--nogroup --nocolor --column --smart-case'
let g:unite_source_grep_recursive_opt = ''
let g:unite_source_rec_max_cache_files = 0
call unite#filters#sorter_default#use(['sorter_rank'])
	call unite#custom#source('file,file/new,buffer,file_rec,file_mru,file_rec/async', 'filters',
	\ ['converter_relative_word', 'matcher_fuzzy',
	\  'sorter_rank', 'converter_relative_abbr'])
call unite#custom#source('file_rec,file_rec/async',
  \ 'max_candidates', 0)
nnoremap <C-P> :<C-u>Unite -start-insert -sync buffer file_rec/async file_mru file/new<cr>
nnoremap <leader>y :<C-u>Unite -start-insert history/yank<cr>
nnoremap <leader>d :<C-u>Unite -start-insert -input=**/ directory<cr>
nnoremap <leader>f :<C-u>Unite -start-insert file<cr>
nnoremap <leader>b :<C-u>Unite -quick-match buffer<cr>
nnoremap <leader>a :<C-u>Unite grep:.<cr>
nnoremap <leader>j :<C-u>Unite -start-insert jump<cr>

" Custom mappings for the unite buffer
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  " Enable navigation with control-j and control-k in insert mode
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
  imap <silent><buffer><expr> <C-x> unite#do_action('split')
  imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
  imap <silent><buffer><expr> <C-t> unite#do_action('tabopen')
  nmap <buffer> <ESC> <Plug>(unite_exit)
endfunction

" " [CtrlP]
" let g:ctrlp_cmd = 'CtrlPMixed'
" noremap <Leader>b :CtrlPBuffer<CR>
" let g:ctrlp_clear_cache_on_exit = 0
" let g:ctrlp_working_path_mode = 0
" let g:ctrlp_extensions = ['dir', 'mixed']
" map <Leader>c <ESC>:CtrlPDir ~/Projects<CR>
" map <Leader>d <ESC>:CtrlPDir<CR>

" [Tagbar]
nnoremap <Leader>t :TagbarToggle<CR>
let g:tagbar_type_coffee = {
  \ 'kinds' : [
  \   'f:functions',
  \   'o:object'
  \ ],
  \ 'kind2scope' : {
  \  'f' : 'object',
  \   'o' : 'object'
  \},
  \ 'sro' : ".",
  \ 'ctagsbin' : 'coffeetags',
  \ 'ctagsargs' : ' ',
  \}

" " [Buffergator]
" let g:buffergator_suppress_keymaps = 1
" let g:buffergator_sort_regime = 'mru'
" nnoremap <Leader>l :BuffergatorToggle<CR>

" " [The Silver Searcher (Ag)]
" nnoremap <Leader>a :Ag --smart-case 

" [airline]
let g:airline_powerline_fonts = 1

" [NERD Tree]
let NERDTreeHijackNetrw=1
map <Leader>r :NERDTreeFind<CR>
" map <Leader>f :edit .<CR>

" [YouCompleteMe]
let g:ycm_key_detailed_diagnostics = ''

" [Emmet]
let g:use_emmet_complete_tag = 1

" [gitgutter]
highlight clear SignColumn

" [ArgsAndMore]
command! QuickfixToArgs CListToArgs

" [UltiSnips]
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" [vim-coffee-script]
let g:coffee_lint_options = '-f /Users/jstotz/.coffeelint.json'
