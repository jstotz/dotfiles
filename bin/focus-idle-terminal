#!/usr/bin/env ruby

# Focuses the closest idle terminal if one exists, otherwise launches a new one.

require 'json'

TERMINAL_CLASS = 'Termite'
TERMINAL_CMD = 'termite'

def find_nodes(node, found = [], &block)
  found << node if yield node
  node[:nodes].each { |node| find_nodes(node, found, &block) }
  found
end

def find_node(node, &block)
  find_nodes(node, &block).first
end

def process_tree(node, parent=nil, depth=0)
  node[:depth] = depth
  if parent
    node[:parent_id] = parent[:id]
    node[:ancestors] = [{id: parent[:id], depth: depth}] + parent[:ancestors]
  else
    node[:parent_id] = nil
    node[:ancestors] = []
    node[:index] = 0
  end
  node[:nodes].each_with_index do |child, index|
    child[:index] = index
    process_tree(child, node, depth + 1)
  end
  node
end

def calculate_sibling_distance(n1, n2)
  return Float::INFINITY unless n1[:parent_id] == n2[:parent_id]
  (n1[:index] - n2[:index]).abs
end

def lowest_common_ancestor(n1, n2)
  (n1[:ancestors] & n2[:ancestors]).first
end

def find_closest_node(nodes, target_node)
  nodes.sort_by do |node|
    [
      calculate_sibling_distance(node, target_node),
      -lowest_common_ancestor(node, target_node)[:depth],
      node[:index]
    ]
  end.first
end

root = process_tree(JSON.parse(`i3-msg -t get_tree`, symbolize_names: true))
workspaces = JSON.parse(`i3-msg -t get_workspaces`, symbolize_names: true)
focused_workspace_num = workspaces.select { |ws| ws[:focused] }.first[:num]
focused_workspace = find_node(root) { |n| n[:type] == 'workspace' && n[:num] == focused_workspace_num }
focused_node = find_node(root) { |n| n[:focused] }

idle_terminals = find_nodes(focused_workspace) do |node|
  node.dig(:window_properties, :class) == TERMINAL_CLASS &&
    node.dig(:window_properties, :title).to_s.start_with?('zsh:')
end

closest_idle_terminal = find_closest_node(idle_terminals, focused_node)

if closest_idle_terminal
  system "i3-msg '[con_id=\"#{closest_idle_terminal[:id]}\"] focus' > /dev/null"
else
  system "i3-msg 'exec #{TERMINAL_CMD}' > /dev/null"
end
